{"version":3,"file":"index.js","sources":["../src/server/components/socket-server.ts","../src/server/utils/strip-ansi.ts","../src/server/components/webpack-sats.ts","../src/server/components/hot-module-service.ts","../src/common/constants.ts","../src/server/index.ts"],"sourcesContent":["/* eslint-disable filenames/match-regex */\nimport * as url from 'url';\nimport * as http from 'http';\nimport * as WebSocket from 'ws';\n\nexport interface SocketServerOptions {\n  server: http.Server;\n  path?: string;\n}\n\ntype MessageReply = (message: string) => void;\ntype MessageCallback = (message: string, reply: MessageReply) => void;\n\nexport class SocketServer {\n  private wsServer: WebSocket.Server;\n  private httpServer: http.Server;\n  private path: string | undefined;\n  private callbacks: Array<MessageCallback> = [];\n\n  constructor(options: SocketServerOptions) {\n    this.path = `/${options.path || ''}`;\n    this.httpServer = options.server;\n    this.wsServer = new WebSocket.Server({ noServer: true });\n    this.setupWsServer();\n    this.setupListenersClient();\n  }\n\n  private setupWsServer() {\n    this.httpServer.on('upgrade', (request, socket, head) => {\n      // Dont know how to handle this case\n      if (!request.url) {\n        return;\n      }\n\n      // register ws server only pathname;\n      const pathname = url.parse(request.url).pathname;\n      // if options.pathname not set or request is mathc\n      if (pathname === this.path) {\n        this.wsServer.handleUpgrade(request, socket, head, (ws) => {\n          this.wsServer.emit('connection', ws);\n        });\n        return;\n      }\n    });\n  }\n\n  private setupListenersClient() {\n    this.wsServer.on('connection', (client: WebSocket.WebSocket) => {\n      client.on('message', (message: string) => {\n        this.callbacks.forEach((callback) => {\n          const reply: MessageReply = (message: string) => {\n            this.sendMessage(client, message);\n          };\n          callback(message.toString(), reply);\n        });\n      });\n    });\n  }\n\n  private sendMessage(client: WebSocket.WebSocket, message: string): void {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  }\n\n  public sendBroadcast(message: string): void {\n    this.wsServer.clients.forEach((client) => {\n      this.sendMessage(client, message);\n    });\n  }\n\n  public onMessage(callback: MessageCallback) {\n    this.callbacks.push(callback);\n  }\n}\n","/* eslint-disable filenames/match-regex */\n\n/**\n * original https://github.com/webpack/webpack-dev-server/blob/master/client-src/utils/stripAnsi.js\n */\n\nconst ansiRegex = new RegExp(\n  [\n    '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n    '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))',\n  ].join('|'),\n  'g',\n);\n\nexport default (string: string): string => {\n  return string.replace(ansiRegex, '');\n};\n","/* eslint-disable filenames/match-regex */\nimport webpack from 'webpack';\nimport stripAnsi from '../utils/strip-ansi';\nimport { ModuleData } from '../../common/types';\n\nexport const STATS_CONFIG = {\n  all: false,\n  cached: true,\n  children: true,\n  modules: true,\n  timings: true,\n  hash: true,\n  errors: true,\n  warnings: true,\n};\n\nexport const normlizeStatsError = (statsError?: Array<webpack.StatsError>): Array<webpack.StatsError> => {\n  return (statsError || []).map((item) => {\n    item.message = stripAnsi(item.message);\n    return item;\n  });\n};\n\nexport const convertStatsToModuleData = (stats?: webpack.Stats | null | undefined): ModuleData | null => {\n  if (!stats) {\n    return null;\n  }\n\n  try {\n    const statsJson = stats.toJson(STATS_CONFIG);\n    return {\n      name: statsJson.name || stats.compilation.name || '',\n      hash: statsJson.hash,\n      time: statsJson.time,\n      warnings: normlizeStatsError(statsJson.warnings),\n      errors: normlizeStatsError(statsJson.errors),\n    };\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const memoStats = (): ((stats?: webpack.Stats | null) => webpack.Stats | null) => {\n  let lastStat: webpack.Stats | null = null;\n\n  return function (stats?: webpack.Stats | null) {\n    if (stats !== undefined) {\n      lastStat = stats;\n    }\n\n    return lastStat;\n  };\n};\n","/* eslint-disable filenames/match-regex */\nimport webpack from 'webpack';\nimport * as http from 'http';\nimport { SocketServer } from './socket-server';\nimport { memoStats, convertStatsToModuleData } from './webpack-sats';\nimport { SERVER_PATH_NAME } from '../../common/constants';\nimport { ServerActions, ModuleData, Message } from '../../common/types';\n\nexport const processMessage = (action: ServerActions, data: ModuleData | null): string => {\n  const message: Message = {\n    action,\n    data,\n  };\n  return JSON.stringify(message);\n};\n\nexport class HotModuleServer {\n  private socketServer: SocketServer;\n  private putStats = memoStats();\n\n  constructor(server: http.Server) {\n    this.socketServer = new SocketServer({\n      server,\n      path: SERVER_PATH_NAME,\n    });\n    this.listenClinets();\n  }\n\n  private listenClinets(): void {\n    this.socketServer.onMessage((message, reply) => {\n      // pong server message;\n      switch (message) {\n        case 'init':\n        case 'check':\n          reply(processMessage(message, this.getModuleData()));\n          break;\n      }\n    });\n  }\n\n  private sendBroadcast(action: ServerActions, data: ModuleData | null): void {\n    const message = processMessage(action, data);\n    this.socketServer.sendBroadcast(message);\n  }\n\n  private getModuleData(stats?: webpack.Stats | null): ModuleData | null {\n    const currentStats = this.putStats(stats);\n    return convertStatsToModuleData(currentStats);\n  }\n\n  // reload modules\n  public processStats(stats?: webpack.Stats | null) {\n    this.sendBroadcast('build', this.getModuleData(stats));\n  }\n\n  // reload page to all client\n  public processReload() {\n    this.sendBroadcast('reload', null);\n  }\n}\n","const name = '__webpack_hmr_sever__';\n\nexport const EVENT_NAME = name;\nexport const SERVER_PATH_NAME = name;\nexport const WEBPACK_PLUGIN_NAME = name;\nexport const TIMEOUT = 5000;\n","import webpack from 'webpack';\nimport * as http from 'http';\nimport { WEBPACK_PLUGIN_NAME } from '../common/constants';\nimport { HotModuleServer } from './components/hot-module-service';\n\nexport const manual = (serve: http.Server) => {\n  return new HotModuleServer(serve);\n};\n\nexport default (compiler: webpack.Compiler, serve: http.Server) => {\n  const hotModuleServer = new HotModuleServer(serve);\n\n  compiler.hooks.done.tap(WEBPACK_PLUGIN_NAME, (stats: webpack.Stats) => {\n    hotModuleServer.processStats(stats);\n  });\n};\n"],"names":["SocketServer","wsServer","httpServer","path","callbacks","constructor","options","this","server","WebSocket","Server","noServer","setupWsServer","setupListenersClient","on","request","socket","head","url","parse","pathname","handleUpgrade","ws","emit","client","message","forEach","callback","toString","sendMessage","readyState","OPEN","send","sendBroadcast","clients","onMessage","push","ansiRegex","RegExp","join","STATS_CONFIG","all","cached","children","modules","timings","hash","errors","warnings","normlizeStatsError","statsError","map","item","replace","processMessage","action","data","JSON","stringify","HotModuleServer","socketServer","putStats","lastStat","stats","undefined","memoStats","name","listenClinets","reply","getModuleData","statsJson","toJson","compilation","time","error","convertStatsToModuleData","processStats","processReload","compiler","serve","hotModuleServer","hooks","done","tap"],"mappings":"gaAaaA,EACHC,SACAC,WACAC,KACAC,UAAoC,GAE5CC,YAAYC,GACVC,KAAKJ,KAAO,IAAIG,EAAQH,MAAQ,KAChCI,KAAKL,WAAaI,EAAQE,OAC1BD,KAAKN,SAAW,IAAIQ,EAAUC,OAAO,CAAEC,UAAU,IACjDJ,KAAKK,gBACLL,KAAKM,uBAGCD,gBACNL,KAAKL,WAAWY,GAAG,WAAW,CAACC,EAASC,EAAQC,KAE9C,IAAKF,EAAQG,IACX,OAIeA,EAAIC,MAAMJ,EAAQG,KAAKE,WAEvBb,KAAKJ,MACpBI,KAAKN,SAASoB,cAAcN,EAASC,EAAQC,GAAOK,IAClDf,KAAKN,SAASsB,KAAK,aAAcD,SAOjCT,uBACNN,KAAKN,SAASa,GAAG,cAAeU,IAC9BA,EAAOV,GAAG,WAAYW,IACpBlB,KAAKH,UAAUsB,SAASC,IAItBA,EAASF,EAAQG,YAHYH,IAC3BlB,KAAKsB,YAAYL,EAAQC,eAQ3BI,YAAYL,EAA6BC,GAC3CD,EAAOM,aAAerB,EAAUsB,MAClCP,EAAOQ,KAAKP,GAITQ,cAAcR,GACnBlB,KAAKN,SAASiC,QAAQR,SAASF,IAC7BjB,KAAKsB,YAAYL,EAAQC,MAItBU,UAAUR,GACfpB,KAAKH,UAAUgC,KAAKT,IClExB,MAAMU,EAAY,IAAIC,OACpB,CACE,+HACA,4DACAC,KAAK,KACP,KCNK,MAAMC,EAAe,CAC1BC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,SAAS,EACTC,SAAS,EACTC,MAAM,EACNC,QAAQ,EACRC,UAAU,GAGCC,EAAsBC,IACzBA,GAAc,IAAIC,KAAKC,IAC7BA,EAAK3B,QAAoB2B,EAAK3B,QDHlB4B,QAAQhB,EAAW,ICIxBe,KCXEE,EAAiB,CAACC,EAAuBC,KACpD,MAAM/B,EAAmB,CACvB8B,OAAAA,EACAC,KAAAA,GAEF,OAAOC,KAAKC,UAAUjC,UAGXkC,EACHC,aACAC,SDwBe,MACvB,IAAIC,EAAiC,KAErC,OAAO,SAAUC,GAKf,YAJcC,IAAVD,IACFD,EAAWC,GAGND,IChCUG,GAEnB5D,YAAYG,GACVD,KAAKqD,aAAe,IAAI5D,EAAa,CACnCQ,OAAAA,EACAL,KCpB0B+D,0BDsB5B3D,KAAK4D,gBAGCA,gBACN5D,KAAKqD,aAAazB,WAAU,CAACV,EAAS2C,KAEpC,OAAQ3C,GACN,IAAK,OACL,IAAK,QACH2C,EAAMd,EAAe7B,EAASlB,KAAK8D,sBAMnCpC,cAAcsB,EAAuBC,GAC3C,MAAM/B,EAAU6B,EAAeC,EAAQC,GACvCjD,KAAKqD,aAAa3B,cAAcR,GAG1B4C,cAAcN,GAEpB,MDxBoC,CAACA,IACvC,IAAKA,EACH,OAAO,KAGT,IACE,MAAMO,EAAYP,EAAMQ,OAAO/B,GAC/B,MAAO,CACL0B,KAAMI,EAAUJ,MAAQH,EAAMS,YAAYN,MAAQ,GAClDpB,KAAMwB,EAAUxB,KAChB2B,KAAMH,EAAUG,KAChBzB,SAAUC,EAAmBqB,EAAUtB,UACvCD,OAAQE,EAAmBqB,EAAUvB,SAEvC,MAAO2B,GACP,OAAO,OCSAC,CADcpE,KAAKsD,SAASE,IAK9Ba,aAAab,GAClBxD,KAAK0B,cAAc,QAAS1B,KAAK8D,cAAcN,IAI1Cc,gBACLtE,KAAK0B,cAAc,SAAU,uBEhDlB,CAAC6C,EAA4BC,KAC1C,MAAMC,EAAkB,IAAIrB,EAAgBoB,GAE5CD,EAASG,MAAMC,KAAKC,IDRajB,yBCQaH,IAC5CiB,EAAgBJ,aAAab,sBARVgB,GACd,IAAIpB,EAAgBoB"}