{"version":3,"file":"index.js","sources":["../src/server/components/socket-server.ts"],"sourcesContent":["/* eslint-disable filenames/match-regex */\nimport * as url from 'url';\nimport * as http from 'http';\nimport * as WebSocket from 'ws';\n\nexport interface SocketServerOptions {\n  server: http.Server;\n  path?: string;\n}\n\ntype MessageReply = (message: string) => void;\ntype MessageCallback = (message: string, reply: MessageReply) => void;\n\nexport class SocketServer {\n  private wsServer: WebSocket.Server;\n  private httpServer: http.Server;\n  private path: string | undefined;\n  private callbacks: Array<MessageCallback> = [];\n\n  constructor(options: SocketServerOptions) {\n    this.path = `/${options.path || ''}`;\n    this.httpServer = options.server;\n    this.wsServer = new WebSocket.Server({ noServer: true });\n    this.setupWsServer();\n    this.setupListenersClient();\n  }\n\n  private setupWsServer() {\n    this.httpServer.on('upgrade', (request, socket, head) => {\n      if (!request.url) {\n        socket.destroy();\n        return;\n      }\n\n      // register ws server only pathname;\n      const pathname = url.parse(request.url).pathname || '/';\n      // if options.pathname not set or request is mathc\n      if (pathname === this.path) {\n        this.wsServer.handleUpgrade(request, socket, head, (ws) => {\n          this.wsServer.emit('connection', ws);\n        });\n        return;\n      }\n    });\n  }\n\n  private setupListenersClient() {\n    this.wsServer.on('connection', (client: WebSocket.WebSocket) => {\n      client.on('message', (message: string) => {\n        this.callbacks.forEach((callback) => {\n          const reply: MessageReply = (message: string) => {\n            this.sendMessage(client, message);\n          };\n          callback(message.toString(), reply);\n        });\n      });\n    });\n  }\n\n  private sendMessage(client: WebSocket.WebSocket, message: string): void {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  }\n\n  public sendBroadcast(message: string): void {\n    this.wsServer.clients.forEach((client) => {\n      this.sendMessage(client, message);\n    });\n  }\n\n  public onMessage(callback: MessageCallback) {\n    this.callbacks.push(callback);\n  }\n}\n"],"names":["WebSocket","url"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;MAaa,YAAY,CAAA;AACf,IAAA,QAAQ,CAAmB;AAC3B,IAAA,UAAU,CAAc;AACxB,IAAA,IAAI,CAAqB;IACzB,SAAS,GAA2B,EAAE,CAAC;AAE/C,IAAA,WAAA,CAAY,OAA4B,EAAA;QACtC,IAAI,CAAC,IAAI,GAAG,CAAI,CAAA,EAAA,OAAO,CAAC,IAAI,IAAI,EAAE,CAAA,CAAE,CAAC;AACrC,QAAA,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;AACjC,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAIA,oBAAS,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC7B;IAEO,aAAa,GAAA;AACnB,QAAA,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,KAAI;AACtD,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBAChB,MAAM,CAAC,OAAO,EAAE,CAAC;gBACjB,OAAO;AACR,aAAA;AAGD,YAAA,MAAM,QAAQ,GAAGC,cAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,IAAI,GAAG,CAAC;AAExD,YAAA,IAAI,QAAQ,KAAK,IAAI,CAAC,IAAI,EAAE;AAC1B,gBAAA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,KAAI;oBACxD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AACvC,iBAAC,CAAC,CAAC;gBACH,OAAO;AACR,aAAA;AACH,SAAC,CAAC,CAAC;KACJ;IAEO,oBAAoB,GAAA;QAC1B,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAA2B,KAAI;YAC7D,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAe,KAAI;gBACvC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAI;AAClC,oBAAA,MAAM,KAAK,GAAiB,CAAC,OAAe,KAAI;AAC9C,wBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACpC,qBAAC,CAAC;oBACF,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;AACtC,iBAAC,CAAC,CAAC;AACL,aAAC,CAAC,CAAC;AACL,SAAC,CAAC,CAAC;KACJ;IAEO,WAAW,CAAC,MAA2B,EAAE,OAAe,EAAA;AAC9D,QAAA,IAAI,MAAM,CAAC,UAAU,KAAKD,oBAAS,CAAC,IAAI,EAAE;AACxC,YAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtB,SAAA;KACF;AAEM,IAAA,aAAa,CAAC,OAAe,EAAA;QAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;AACvC,YAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACpC,SAAC,CAAC,CAAC;KACJ;AAEM,IAAA,SAAS,CAAC,QAAyB,EAAA;AACxC,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/B;AACF;;;;"}